// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20220611233228_InitialDbMigration")]
    partial class InitialDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CORE.Models.Doctor", b =>
                {
                    b.Property<string>("Surname")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Experience")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("HospitalUnitId")
                        .HasColumnType("int");

                    b.HasKey("Surname", "Name", "Patronymic");

                    b.HasIndex("HospitalUnitId");

                    b.HasIndex("Name");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CORE.Models.HospitalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HeadName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeadPatronymic")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeadSurname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HeadSurname", "HeadName", "HeadPatronymic");

                    b.ToTable("HospitalUnits");
                });

            modelBuilder.Entity("CORE.Models.HospitalWard", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<short>("BedsQuantity")
                        .HasColumnType("smallint");

                    b.Property<int?>("HospitalUnitId")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("HospitalUnitId");

                    b.ToTable("HospitalWards");
                });

            modelBuilder.Entity("CORE.Models.Patient", b =>
                {
                    b.Property<string>("Surname")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttendingDoctorName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttendingDoctorPatronymic")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttendingDoctorSurname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfAdmission")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("HospitalUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalWardNumber")
                        .HasColumnType("int");

                    b.HasKey("Surname", "Name", "Patronymic");

                    b.HasIndex("HospitalUnitId");

                    b.HasIndex("HospitalWardNumber");

                    b.HasIndex("AttendingDoctorSurname", "AttendingDoctorName", "AttendingDoctorPatronymic");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CORE.Models.Profession", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RelatedHospitalUnitId")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("RelatedHospitalUnitId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("CORE.Models.Doctor", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", null)
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalUnitId");

                    b.HasOne("CORE.Models.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("CORE.Models.HospitalUnit", b =>
                {
                    b.HasOne("CORE.Models.Doctor", "Head")
                        .WithMany()
                        .HasForeignKey("HeadSurname", "HeadName", "HeadPatronymic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("CORE.Models.HospitalWard", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", null)
                        .WithMany("HospitalWards")
                        .HasForeignKey("HospitalUnitId");
                });

            modelBuilder.Entity("CORE.Models.Patient", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", null)
                        .WithMany("Patients")
                        .HasForeignKey("HospitalUnitId");

                    b.HasOne("CORE.Models.HospitalWard", null)
                        .WithMany("Patients")
                        .HasForeignKey("HospitalWardNumber");

                    b.HasOne("CORE.Models.Doctor", "AttendingDoctor")
                        .WithMany()
                        .HasForeignKey("AttendingDoctorSurname", "AttendingDoctorName", "AttendingDoctorPatronymic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendingDoctor");
                });

            modelBuilder.Entity("CORE.Models.Profession", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", "RelatedHospitalUnit")
                        .WithMany()
                        .HasForeignKey("RelatedHospitalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedHospitalUnit");
                });

            modelBuilder.Entity("CORE.Models.HospitalUnit", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("HospitalWards");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CORE.Models.HospitalWard", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20220812180827_fullReset")]
    partial class fullReset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CORE.Models.Doctor", b =>
                {
                    b.Property<string>("Surname")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Experience")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("HospitalUnitName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Surname", "Name", "Patronymic");

                    b.HasIndex("HospitalUnitName");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CORE.Models.HospitalUnit", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Name");

                    b.ToTable("HospitalUnits");
                });

            modelBuilder.Entity("CORE.Models.HospitalWard", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<short>("BedsQuantity")
                        .HasColumnType("smallint");

                    b.Property<string>("HospitalUnitName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Number");

                    b.HasIndex("HospitalUnitName");

                    b.ToTable("HospitalWards");
                });

            modelBuilder.Entity("CORE.Models.Illness", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HospitalUnitName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Procedures")
                        .IsRequired()
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("varchar(5000)");

                    b.HasKey("Name");

                    b.HasIndex("HospitalUnitName");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("CORE.Models.Medicine", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DosageForm")
                        .HasColumnType("varchar(100)");

                    b.Property<short>("QuantityInStock")
                        .HasColumnType("smallint");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Name");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("CORE.Models.Patient", b =>
                {
                    b.Property<string>("Surname")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttendingDoctorName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttendingDoctorPatronymic")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttendingDoctorSurname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfAdmission")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HospitalWardNumber")
                        .HasColumnType("int");

                    b.HasKey("Surname", "Name", "Patronymic");

                    b.HasIndex("Diagnosis");

                    b.HasIndex("HospitalWardNumber");

                    b.HasIndex("AttendingDoctorSurname", "AttendingDoctorName", "AttendingDoctorPatronymic");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CORE.Models.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IllnessName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("MedicineQuantity")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("IllnessName");

                    b.HasIndex("MedicineName");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("CORE.Models.Doctor", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", "HospitalUnit")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalUnitName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalUnit");
                });

            modelBuilder.Entity("CORE.Models.HospitalWard", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", "HospitalUnit")
                        .WithMany("HospitalWards")
                        .HasForeignKey("HospitalUnitName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalUnit");
                });

            modelBuilder.Entity("CORE.Models.Illness", b =>
                {
                    b.HasOne("CORE.Models.HospitalUnit", "HospitalUnit")
                        .WithMany("Illnesses")
                        .HasForeignKey("HospitalUnitName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalUnit");
                });

            modelBuilder.Entity("CORE.Models.Patient", b =>
                {
                    b.HasOne("CORE.Models.Illness", "Illness")
                        .WithMany()
                        .HasForeignKey("Diagnosis")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Models.HospitalWard", "HospitalWard")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalWardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Models.Doctor", "AttendingDoctor")
                        .WithMany("Patients")
                        .HasForeignKey("AttendingDoctorSurname", "AttendingDoctorName", "AttendingDoctorPatronymic");

                    b.Navigation("AttendingDoctor");

                    b.Navigation("HospitalWard");

                    b.Navigation("Illness");
                });

            modelBuilder.Entity("CORE.Models.Treatment", b =>
                {
                    b.HasOne("CORE.Models.Illness", "Illness")
                        .WithMany("Treatments")
                        .HasForeignKey("IllnessName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("CORE.Models.Doctor", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CORE.Models.HospitalUnit", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("HospitalWards");

                    b.Navigation("Illnesses");
                });

            modelBuilder.Entity("CORE.Models.HospitalWard", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CORE.Models.Illness", b =>
                {
                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
